{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [...]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"CONTRIBUTING/","title":"Contributing guidelines","text":"<p>We welcome any kind of contribution to our software, from simple comment or question to a full fledged pull request. Please read and follow our Code of Conduct.</p> <p>A contribution can be one of the following cases:</p> <ol> <li>you have a question;</li> <li>you think you may have found a bug (including unexpected behavior);</li> <li>you want to make some kind of change to the code base (e.g. to fix a bug, to add a new feature, to update documentation);</li> <li>you want to make a new release of the code base.</li> </ol> <p>The sections below outline the steps in each case.</p>"},{"location":"CONTRIBUTING/#you-have-a-question","title":"You have a question","text":"<ol> <li>use the search functionality here to see if someone already filed the same issue;</li> <li>if your issue search did not yield any relevant results, make a new issue;</li> <li>apply the \"Question\" label; apply other labels when relevant.</li> </ol>"},{"location":"CONTRIBUTING/#you-think-you-may-have-found-a-bug","title":"You think you may have found a bug","text":"<ol> <li>use the search functionality here to see if someone already filed the same issue;</li> <li>if your issue search did not yield any relevant results, make a new issue, making sure to provide enough information to the rest of the community to understand the cause and context of the problem. Depending on the issue, you may want to include:<ul> <li>the SHA hashcode of the commit that is causing your problem;</li> <li>some identifying information (name and version number) for dependencies you're using;</li> <li>information about the operating system;</li> </ul> </li> <li>apply relevant labels to the newly created issue.</li> </ol>"},{"location":"CONTRIBUTING/#you-want-to-make-some-kind-of-change-to-the-code-base","title":"You want to make some kind of change to the code base","text":"<ol> <li>(important) announce your plan to the rest of the community before you start working. This announcement should be in the form of a (new) issue;</li> <li>(important) wait until some kind of consensus is reached about your idea being a good idea;</li> <li>if needed, fork the repository to your own Github profile and create your own feature branch off of the latest main commit. While working on your feature branch, make sure to stay up to date with the main branch by pulling in changes, possibly from the 'upstream' repository (follow the instructions here and here);</li> <li>install dependencies (see the development documentation);</li> <li>make sure the existing tests still work by running <code>pytest</code>;</li> <li>add your own tests (if necessary);</li> <li> <p>update or expand the documentation;</p> </li> <li> <p>push your feature branch to (your fork of) the diffwofost repository on GitHub;</p> </li> <li>create the pull request, e.g. following the instructions here.</li> </ol> <p>In case you feel like you've made a valuable contribution, but you don't know how to write or run tests for it, or how to generate the documentation: don't let this discourage you from making the pull request; we can help you! Just go ahead and submit the pull request, but keep in mind that you might be asked to append additional commits to your pull request.</p>"},{"location":"CONTRIBUTING/#you-want-to-make-a-new-release-of-the-code-base","title":"You want to make a new release of the code base","text":"<p>To create a release you need write permission on the repository.</p> <ol> <li>Check the author list in <code>CITATION.cff</code></li> <li> <p>Bump the version using <code>bump-my-version bump &lt;major|minor|patch&gt;</code>. For example, <code>bump-my-version bump major</code> will increase major version numbers everywhere it's needed (code, meta, etc.) in the repo. Alternatively the version can be manually changed in diffwofost/init.py, pyproject.toml, CITATION.cffand docs/conf.py (and other places it was possibly added).</p> </li> <li> <p>Go to the GitHub release page</p> </li> <li>Press draft a new release button</li> <li>Fill version, title and description field</li> <li>Press the Publish Release button</li> </ol> <p>Also a Zenodo entry will be made for the release with its own DOI.</p>"},{"location":"README.dev/","title":"<code>diffwofost</code> developer documentation","text":"<p>If you're looking for user documentation, go here.</p>"},{"location":"README.dev/#development-install","title":"Development install","text":"<pre><code># Create a virtual environment, e.g. with\npython -m venv env\n\n# activate virtual environment\nsource env/bin/activate\n\n# make sure to have a recent version of pip and setuptools\npython -m pip install --upgrade pip setuptools\n\n# (from the project root directory)\n# install diffwofost as an editable package\npython -m pip install --no-cache-dir --editable .\n# install development dependencies\npython -m pip install --no-cache-dir --editable .[dev]\n# install documentation dependencies only\npython -m pip install --no-cache-dir --editable .[docs]\n</code></pre> <p>Afterwards check that the install directory is present in the <code>PATH</code> environment variable.</p>"},{"location":"README.dev/#running-the-tests","title":"Running the tests","text":"<p>There are two ways to run tests.</p> <p>The first way requires an activated virtual environment with the development tools installed:</p> <pre><code>pytest -v\n</code></pre>"},{"location":"README.dev/#test-coverage","title":"Test coverage","text":"<p>In addition to just running the tests to see if they pass, they can be used for coverage statistics, i.e. to determine how much of the package's code is actually executed during tests. In an activated virtual environment with the development tools installed, inside the package directory, run:</p> <pre><code>coverage run\n</code></pre> <p>This runs tests and stores the result in a <code>.coverage</code> file. To see the results on the command line, run</p> <pre><code>coverage report\n</code></pre> <p><code>coverage</code> can also generate output in HTML and other formats; see <code>coverage help</code> for more information.## Running linters locally</p> <p>For linting and sorting imports we will use ruff. Running the linters requires an activated virtual environment with the development tools installed.</p> <pre><code># linter\nruff check .\n\n# linter with automatic fixing\nruff check . --fix\n</code></pre> <p>To fix readability of your code style you can use yapf</p>"},{"location":"README.dev/#generating-documentation-page","title":"Generating documentation page","text":"<ul> <li>Install the required dependencies as:</li> </ul> <pre><code>cd FOWT-ML\npip install -e .[docs]\n</code></pre> <ul> <li>Build the documentation as:</li> </ul> <pre><code>mkdocs build\n</code></pre> <ul> <li>Preview the documentation as:</li> </ul> <pre><code>mkdocs serve\n</code></pre> <p>Click on the link provided in the terminal to view the documentation page.</p>"},{"location":"README.dev/#versioning","title":"Versioning","text":"<p>Bumping the version across all files is done with bump-my-version, e.g.</p> <pre><code>bump-my-version bump major  # bumps from e.g. 0.3.2 to 1.0.0\nbump-my-version bump minor  # bumps from e.g. 0.3.2 to 0.4.0\nbump-my-version bump patch  # bumps from e.g. 0.3.2 to 0.3.3\n</code></pre>"},{"location":"README.dev/#making-a-release","title":"Making a release","text":"<p>This section describes how to make a release in 3 parts:</p> <ol> <li>preparation</li> <li>making a release on PyPI</li> <li>making a release on GitHub</li> </ol>"},{"location":"README.dev/#13-preparation","title":"(1/3) Preparation","text":"<ol> <li>Verify that the information in <code>CITATION.cff</code> is correct.</li> <li>Make sure the version has been updated.</li> <li>Run the unit tests with <code>pytest -v</code></li> </ol>"},{"location":"README.dev/#23-pypi","title":"(2/3) PyPI","text":"<p>In a new terminal:</p> <pre><code># OPTIONAL: prepare a new directory with fresh git clone to ensure the release\n# has the state of origin/main branch\ncd $(mktemp -d diffwofost.XXXXXX)\ngit clone git@github.com:WUR-AI/diffwofost .\n\n# make sure to have a recent version of pip and the publishing dependencies\npython -m pip install --upgrade pip\npython -m pip install .[publishing]\n\n# create the source distribution and the wheel\npython -m build\n\n# upload to test pypi instance (requires credentials)\npython -m twine upload --repository testpypi dist/*\n</code></pre> <p>Visit https://test.pypi.org/project/diffwofost and verify that your package was uploaded successfully. Keep the terminal open, we'll need it later.</p> <p>In a new terminal, without an activated virtual environment or an env directory:</p> <pre><code>cd $(mktemp -d diffwofost-test.XXXXXX)\n\n# prepare a clean virtual environment and activate it\npython -m venv env\nsource env/bin/activate\n\n# make sure to have a recent version of pip and setuptools\npython -m pip install --upgrade pip\n\n# install from test pypi instance:\npython -m pip -v install --no-cache-dir \\\n--index-url https://test.pypi.org/simple/ \\\n--extra-index-url https://pypi.org/simple diffwofost\n</code></pre> <p>Check that the package works as it should when installed from pypitest.</p> <p>Then upload to pypi.org with:</p> <pre><code># Back to the first terminal,\n# FINAL STEP: upload to PyPI (requires credentials)\npython -m twine upload dist/*\n</code></pre>"},{"location":"README.dev/#33-github","title":"(3/3) GitHub","text":"<p>Don't forget to also make a release on GitHub.GitHub-Zenodo integration will also trigger Zenodo into making a snapshot of your repository and sticking a DOI on it.</p>"},{"location":"project_setup/","title":"Project Setup","text":"<p>Here we provide some details about the project setup. Most of the choices are explained in the guide. Links to the relevant sections are included below. Feel free to remove this text when the development of the software package takes off.</p> <p>For a quick reference on software development, we refer to the software guide checklist.</p>"},{"location":"project_setup/#python-versions","title":"Python versions","text":"<p>This repository is set up with Python versions:</p> <ul> <li>3.10</li> <li>3.11</li> <li>3.12</li> </ul> <p>Add or remove Python versions based on project requirements. See the guide for more information about Python versions.</p>"},{"location":"project_setup/#package-management-and-dependencies","title":"Package management and dependencies","text":"<p>You can use either pip or conda for installing dependencies and package management. This repository does not force you to use one or the other, as project requirements differ. For advice on what to use, please check the relevant section of the guide.</p> <ul> <li>Runtime dependencies should be added to <code>pyproject.toml</code> in the <code>dependencies</code>   list under <code>[project]</code>.</li> <li>Development dependencies, such as for testing or documentation, should be   added to <code>pyproject.toml</code> in one of the lists under   <code>[project.optional-dependencies]</code>.</li> </ul>"},{"location":"project_setup/#packagingone-command-install","title":"Packaging/One command install","text":"<p>You can distribute your code using PyPI. The guide can help you decide which tool to use for packaging.</p>"},{"location":"project_setup/#testing-and-code-coverage","title":"Testing and code coverage","text":"<ul> <li>Tests should be put in the <code>tests</code> folder.</li> <li>The <code>tests</code> folder contains:</li> <li>Example tests that you should replace with your own meaningful tests (file: <code>test_my_module.py</code>)</li> <li>The testing framework used is PyTest</li> <li>PyTest introduction</li> <li>PyTest is listed as a development dependency</li> <li>This is configured in <code>pyproject.toml</code></li> <li>The project uses GitHub action workflows to automatically run tests on GitHub infrastructure against multiple Python versions</li> <li>Workflows can be found in <code>.github/workflows</code></li> <li>Relevant section in the guide</li> </ul>"},{"location":"project_setup/#documentation","title":"Documentation","text":"<ul> <li>Documentation should be put in the <code>docs/</code> directory.</li> <li>We recommend writing the documentation using Google style docstrings.</li> <li>The documentation is set up with the MkDocs.</li> <li><code>.mkdocs.yml</code> is the MkDocs configuration file. When MkDocs is building the documentation this package and its development dependencies are installed so the API reference can be rendered.</li> </ul>"},{"location":"project_setup/#coding-style-conventions-and-code-quality","title":"Coding style conventions and code quality","text":"<ul> <li>Relevant section in the NLeSC guide and README.dev.md.</li> </ul>"},{"location":"project_setup/#continuous-code-quality","title":"Continuous code quality","text":"<p>Sonarcloud is used to perform quality analysis and code coverage report</p> <ul> <li><code>sonar-project.properties</code> is the SonarCloud configuration file</li> <li><code>.github/workflows/sonarcloud.yml</code> is the GitHub action workflow which performs the SonarCloud analysis</li> </ul>"},{"location":"project_setup/#package-version-number","title":"Package version number","text":"<ul> <li>We recommend using semantic versioning.</li> <li>For convenience, the package version is stored in a single place: <code>pyproject.toml</code> under the <code>tool.bumpversion</code> header.</li> <li>Don't forget to update the version number before making a release!</li> </ul>"},{"location":"project_setup/#logging","title":"Logging","text":"<ul> <li>We recommend using the logging module for getting useful information from your module (instead of using print).</li> <li>The project is set up with a logging example.</li> <li>Relevant section in the guide</li> </ul>"},{"location":"project_setup/#citationcff","title":"CITATION.cff","text":"<ul> <li>To allow others to cite your software, add a <code>CITATION.cff</code> file</li> <li>It only makes sense to do this once there is something to cite (e.g., a software release with a DOI).</li> <li>Follow the making software citable section in the guide.</li> </ul>"},{"location":"project_setup/#code_of_conductmd","title":"CODE_OF_CONDUCT.md","text":"<ul> <li>Information about how to behave professionally</li> <li>Relevant section in the guide</li> </ul>"},{"location":"project_setup/#contributingmd","title":"CONTRIBUTING.md","text":"<ul> <li>Information about how to contribute to this software package</li> <li>Relevant section in the guide</li> </ul>"},{"location":"project_setup/#notice","title":"NOTICE","text":"<ul> <li>List of attributions of this project and Apache-license dependencies</li> <li>Relevant section in the guide</li> </ul>"}]}